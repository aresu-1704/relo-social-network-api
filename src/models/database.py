# Nh·∫≠p c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import os
from motor.motor_asyncio import AsyncIOMotorClient # Th∆∞ vi·ªán b·∫•t ƒë·ªìng b·ªô cho MongoDB
from beanie import init_beanie # ODM (Object-Document Mapper) cho MongoDB
from dotenv import load_dotenv # ƒê·ªÉ t·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
from typing import Type

# Nh·∫≠p c√°c model t·ª´ c√°c file kh√°c
from .user import User
from .conversation import Conversation
from .message import Message
from .post import Post
from .friend_request import FriendRequest
from .otp import OTP
from .notification import Notification
from .comment import Comment

# Danh s√°ch c√°c model Beanie s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o
# Th√™m t·∫•t c·∫£ c√°c model c·ªßa b·∫°n v√†o ƒë√¢y
DOCUMENT_MODELS: list[Type] = [User, Conversation, Message, Post, FriendRequest, OTP, Notification, Comment]

client = None  # üîπ client global, d√πng 1 l·∫ßn su·ªët v√≤ng ƒë·ªùi app

async def init_db():
    """
    Kh·ªüi t·∫°o k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu v√† Beanie ODM.
    ƒê·∫£m b·∫£o ch·ªâ t·∫°o m·ªôt client duy nh·∫•t.
    """
    global client

    # N·∫øu ƒë√£ c√≥ client, b·ªè qua
    if client is not None:
        return client

    load_dotenv()
    mongo_uri = os.getenv("MONGO_URI")
    if not mongo_uri:
        raise ValueError("Kh√¥ng t√¨m th·∫•y MONGO_URI trong c√°c bi·∫øn m√¥i tr∆∞·ªùng.")

    # T·∫°o client duy nh·∫•t
    client = AsyncIOMotorClient(mongo_uri)
    database = client.get_database("relo-social-network")

    await init_beanie(database=database, document_models=DOCUMENT_MODELS)

    return client

