import asyncio
from datetime import datetime, timedelta
from typing import List, Optional
from ..models import Conversation, LastMessage, Message, ParticipantInfo, User
from ..websocket import manager
from ..schemas import SimpleMessagePublic, LastMessagePublic, ConversationWithParticipants
from ..schemas.user_schema import UserPublic
from .user_service import UserService
from .fcm_service import FCMService
from ..utils import upload_to_cloudinary
from fastapi import UploadFile
from ..utils import map_message_to_public_dict, map_conversation_to_public_dict

class MessageService:
    
    @staticmethod
    async def get_conversation_by_id(conversation_id: str):
        """L·∫•y conversation theo ID."""
        try:
            conversation = await Conversation.get(conversation_id)
            return conversation
        except Exception as e:
            print(f"Error getting conversation by ID: {e}")
            return None

    @staticmethod
    async def create_notification_message(
        conversation_id: str,
        notification_type: str,
        text: str,
        metadata: Optional[dict] = None,
        broadcast: bool = True
    ):
        """
        T·∫°o m·ªôt notification message trong conversation.
        notification_type: 'name_changed', 'avatar_changed', 'member_left', 'member_added'
        broadcast: N·∫øu True th√¨ t·ª± ƒë·ªông broadcast, n·∫øu False th√¨ ƒë·ªÉ caller t·ª± broadcast
        """
        notification_content = {
            "type": "notification",
            "notification_type": notification_type,
            "text": text,
            "metadata": metadata or {}
        }
        
        # T·∫°o message v·ªõi sender_id l√† system
        message = Message(
            conversationId=conversation_id,
            senderId="system",
            content=notification_content,
            createdAt=datetime.utcnow() + timedelta(hours=7)
        )
        await message.save()
        
        # C·∫≠p nh·∫≠t lastMessage
        conversation = await Conversation.get(conversation_id)
        if conversation:
            conversation.lastMessage = LastMessage(
                content=message.content,
                senderId=message.senderId,
                createdAt=message.createdAt
            )
            conversation.updatedAt = datetime.utcnow() + timedelta(hours=7)
            conversation.seenIds = []
            await conversation.save()
            
            # Ch·ªâ broadcast n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if broadcast:
                message_data = map_message_to_public_dict(message)
                conversation_data = map_conversation_to_public_dict(conversation)
                
                tasks = [
                    manager.broadcast_to_user(
                        uid,
                        {
                            "type": "new_message",
                            "payload": {"message": message_data, "conversation": conversation_data}
                        }
                    )
                    for uid in [p.userId for p in conversation.participants]
                ]
                await asyncio.gather(*tasks)
        
        return message

    async def get_or_create_conversation(
        participant_ids: List[str],
        is_group: bool = False,
        name: Optional[str] = None,
    ):
        """
        T√¨m m·ªôt cu·ªôc tr√≤ chuy·ªán hi·ªán c√≥ ho·∫∑c t·∫°o m·ªõi.
        - N·∫øu l√† chat 1‚Äì1 => t√¨m ch√≠nh x√°c 2 ng∆∞·ªùi.
        - N·∫øu l√† group => lu√¥n t·∫°o m·ªõi (v√¨ c√≥ th·ªÉ c√≥ nhi·ªÅu nh√≥m tr√πng th√†nh vi√™n).
        """
        canonical_participants = sorted(list(set(participant_ids)))

        if len(canonical_participants) < 2:
            raise ValueError("M·ªôt cu·ªôc tr√≤ chuy·ªán y√™u c·∫ßu √≠t nh·∫•t hai ng∆∞·ªùi tham gia.")

        if not is_group:
            # üîç T√¨m chat 1‚Äì1 c√≥ ƒë√∫ng 2 user
            conversation = await Conversation.find_one({
                "participants": {"$size": len(canonical_participants)},
                "participants.userId": {"$all": canonical_participants},
                "isGroup": False
            })
        else:
            # üîç Group chat lu√¥n t·∫°o m·ªõi
            conversation = None

        if not conversation:
            participants = [ParticipantInfo(userId=uid) for uid in canonical_participants]
            conversation = Conversation(
                participants=participants,
                isGroup=is_group,
                name=name,
            )
            await conversation.insert()
            
            # N·∫øu l√† nh√≥m, t·∫°o tin nh·∫Øn system
            if is_group and name:
                try:
                    await MessageService.create_notification_message(
                        conversation_id=str(conversation.id),
                        notification_type="group_created",
                        text=f"Nh√≥m '{name}' ƒë√£ ƒë∆∞·ª£c t·∫°o",
                        metadata={"group_name": name}
                    )
                except Exception as e:
                    print(f"Failed to create notification message: {e}")

        return conversation

    @staticmethod
    async def send_message(
        sender_id: str, 
        conversation_id: str, 
        content: dict, 
        files: Optional[List[UploadFile]] = None
    ):
        """
        G·ª≠i tin nh·∫Øn, upload file n·∫øu c√≥, l∆∞u DB v√† ph√°t t·ªõi ng∆∞·ªùi tham gia.
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation:
            raise ValueError("Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán.")

        if sender_id not in [p.userId for p in conversation.participants]:
            raise PermissionError("Ng∆∞·ªùi g·ª≠i kh√¥ng thu·ªôc cu·ªôc tr√≤ chuy·ªán n√†y.");

        if files:
            if content['type'] == 'audio' or content['type'] == 'file':
                upload_tasks = [upload_to_cloudinary(f) for f in files]    
                results = await asyncio.gather(*upload_tasks)
                content["url"] = results[0]["url"]
            else:
                if content['type'] == 'media':
                    upload_tasks = [upload_to_cloudinary(f) for f in files]    
                    results = await asyncio.gather(*upload_tasks)
                    content["urls"] = [result["url"] for result in results]

        # T·∫°o v√† l∆∞u tin nh·∫Øn
        message = Message(
            conversationId=conversation_id,
            senderId=sender_id,
            content=content,
            createdAt=datetime.utcnow() + timedelta(hours=7)
        )
        await message.save()

        # C·∫≠p nh·∫≠t lastMessage cho conversation
        conversation.lastMessage = LastMessage(
            content=message.content,
            senderId=message.senderId,
            createdAt=message.createdAt
        )
        conversation.updatedAt = datetime.utcnow() + timedelta(hours=7)
        conversation.seenIds = [sender_id]
        await conversation.save()

        # Ch·ªâ l·∫•y sender n·∫øu sender_id h·ª£p l·ªá (kh√¥ng ph·∫£i system ho·∫∑c deleted)
        sender = None
        if sender_id not in ['system', 'deleted']:
            try:
                sender = await User.get(sender_id)
            except Exception as e:
                sender = None

        # Ki·ªÉm tra n·∫øu sender ƒë√£ b·ªã x√≥a
        is_sender_deleted = not sender or sender.status == 'deleted'

        # Ph√°t broadcast tin nh·∫Øn m·ªõi
        message_data = {
            "id": str(message.id),
            "senderId": sender_id if sender_id in ['system', 'deleted'] else ("deleted" if is_sender_deleted else str(sender.id)),
            "conversationId": message.conversationId,
            "avatarUrl": None if (sender_id in ['system', 'deleted'] or is_sender_deleted) else sender.avatarUrl,
            "content": message.content,
            "createdAt": message.createdAt.isoformat()
        }

        conversation_data = map_conversation_to_public_dict(conversation)

        tasks = [
            manager.broadcast_to_user(
                uid,
                {
                    "type": "new_message",
                    "payload": {"message": message_data, "conversation": conversation_data}
                }
            )
            for uid in [p.userId for p in conversation.participants]
        ]
        await asyncio.gather(*tasks)

        # G·ª≠i push notification cho users offline kh√¥ng t·∫Øt th√¥ng b√°o
        async def send_push_notifications():
            try:
                # L·∫•y danh s√°ch participants kh√¥ng t·∫Øt th√¥ng b√°o v√† kh√¥ng ph·∫£i sender
                participants_to_notify = [
                    p.userId for p in conversation.participants
                    if p.userId != sender_id and not p.muteNotifications
                ]
                
                if not participants_to_notify:
                    return
                
                # T·∫†M B·ªé: G·ª≠i push notification cho t·∫•t c·∫£ users (k·ªÉ c·∫£ ƒëang online)
                # offline_user_ids = manager.get_offline_users(participants_to_notify)
                # if not offline_user_ids:
                #     return
                
                # G·ª≠i cho t·∫•t c·∫£ participants (kh√¥ng ph√¢n bi·ªát online/offline)
                offline_user_ids = participants_to_notify
                
                # L·∫•y th√¥ng tin sender ƒë·ªÉ hi·ªÉn th·ªã
                sender_name = "Ng∆∞·ªùi d√πng"  # Default
                sender_avatar = None
                if sender and not is_sender_deleted:
                    sender_name = sender.displayName or sender.username
                    sender_avatar = sender.avatarUrl
                
                # L·∫•y th√¥ng tin conversation
                conversation_name = None
                if conversation.isGroup:
                    conversation_name = conversation.name or "Nh√≥m"
                else:
                    # N·∫øu l√† chat 1-1, t√¨m t√™n c·ªßa ng∆∞·ªùi kia
                    other_participant_id = next(
                        (p.userId for p in conversation.participants if p.userId != sender_id),
                        None
                    )
                    if other_participant_id:
                        try:
                            other_user = await User.get(other_participant_id)
                            if other_user:
                                conversation_name = other_user.displayName or other_user.username
                        except:
                            pass
                
                # L·∫•y message content v√† image URL ƒë·ªÉ hi·ªÉn th·ªã
                message_content = ""
                message_type = "text"
                image_url = None
                if isinstance(message.content, dict):
                    content_type = message.content.get("type", "text")
                    message_type = content_type
                    if content_type == "text":
                        message_content = message.content.get("text", "")
                    elif content_type == "image":
                        message_content = "üì∑ ƒê√£ g·ª≠i ·∫£nh"
                        image_url = message.content.get("url")
                    elif content_type == "media":
                        message_content = "üñºÔ∏è ƒê√£ g·ª≠i media"
                        urls = message.content.get("urls", [])
                        if urls:
                            image_url = urls[0]  # L·∫•y ·∫£nh ƒë·∫ßu ti√™n
                    elif content_type == "audio":
                        message_content = "üé§ ƒê√£ g·ª≠i tin nh·∫Øn tho·∫°i"
                    elif content_type == "file":
                        message_content = "üìÅ ƒê√£ g·ª≠i file"
                    else:
                        message_content = "ƒê√£ g·ª≠i tin nh·∫Øn"
                
                # G·ª≠i push notification
                await FCMService.send_message_notification(
                    conversation_id=conversation_id,
                    sender_id=sender_id,
                    sender_name=sender_name,
                    sender_avatar=sender_avatar,
                    message_content=message_content,
                    message_type=message_type,
                    image_url=image_url,
                    conversation_name=conversation_name,
                    is_group=conversation.isGroup,
                    offline_user_ids=offline_user_ids
                )
            except Exception as e:
                pass
        
        # G·ª≠i notification trong background (kh√¥ng block response)
        asyncio.create_task(send_push_notifications())

        return message
    
    @staticmethod
    async def get_messages_for_conversation(
        conversation_id: str,
        user_id: str,
        limit: int = 50,
        skip: int = 0
    ):
        """
        L·∫•y tin nh·∫Øn cho m·ªôt cu·ªôc tr√≤ chuy·ªán, ch·ªâ g·ªìm nh·ªØng tin nh·∫Øn sau khi user x√≥a (n·∫øu c√≥).
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation:
            raise PermissionError("Cu·ªôc tr√≤ chuy·ªán kh√¥ng t·ªìn t·∫°i.")

        # üîç Ki·ªÉm tra user c√≥ trong participant kh√¥ng
        participant = next((p for p in conversation.participants if p.userId == user_id), None)
        if not participant:
            raise PermissionError("B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p xem cu·ªôc tr√≤ chuy·ªán n√†y.")

        # üî∏ Th·ªùi ƒëi·ªÉm user n√†y ƒë√£ x√≥a tin nh·∫Øn (n·∫øu c√≥)
        delete_time = participant.lastMessageDelete

        # üîé T·∫°o ƒëi·ªÅu ki·ªán truy v·∫•n tin nh·∫Øn
        query = {"conversationId": conversation_id}
        if delete_time:
            query["createdAt"] = {"$gt": delete_time}

        messages = (
            await Message.find(
                query,
                sort="-createdAt",
                skip=skip,
                limit=limit
            ).to_list()
        )

        # L·∫•y ng∆∞·ªùi g·ª≠i ƒë·ªÉ g·∫Øn th√™m th√¥ng tin hi·ªÉn th·ªã
        sender_ids = list(set(msg.senderId for msg in messages))
        # L·ªçc b·ªè c√°c senderId kh√¥ng ph·∫£i ObjectId (system, deleted)
        valid_sender_ids = [sid for sid in sender_ids if sid not in ['system', 'deleted']]
        senders = await UserService.get_users_by_ids(valid_sender_ids) if valid_sender_ids else []
        senders_map = {str(s.id): s for s in senders}

        simple_messages = []
        for msg in messages:
            sender = senders_map.get(msg.senderId)
            # X·ª≠ l√Ω tin nh·∫Øn notification (t·ª´ system)
            if msg.senderId == "system":
                simple_messages.append(
                    SimpleMessagePublic(
                        id=str(msg.id),
                        senderId="system",
                        avatarUrl=None,
                        content=msg.content,
                        createdAt=msg.createdAt
                    )
                )
            # Ki·ªÉm tra n·∫øu sender kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a
            elif sender and sender.status != 'deleted':
                simple_messages.append(
                    SimpleMessagePublic(
                        id=str(msg.id),
                        senderId=msg.senderId,
                        avatarUrl=sender.avatarUrl,
                        content=msg.content,
                        createdAt=msg.createdAt
                    )
                )
            else:
                # G·ª≠i th√¥ng tin "deleted" cho t√†i kho·∫£n ƒë√£ b·ªã x√≥a
                simple_messages.append(
                    SimpleMessagePublic(
                        id=str(msg.id),
                        senderId="deleted",
                        avatarUrl=None,
                        content=msg.content,
                        createdAt=msg.createdAt
                    )
                )

        return simple_messages


    @staticmethod
    async def get_conversations_for_user(user_id: str):
        """
        L·∫•y t·∫•t c·∫£ c√°c cu·ªôc tr√≤ chuy·ªán cho m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ.
        """
        convos = await Conversation.find(
            {"participants.userId": user_id}
        ).sort("-updatedAt").to_list()

        result = []

        for convo in convos:
            # L·∫•y participant info c·ªßa current_user trong conversation n√†y
            participant_info = next(
                (p for p in convo.participants if p.userId == str(user_id)),
                None
            )
            delete_time = participant_info.lastMessageDelete if participant_info else None

            # L·∫•y th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi tham gia
            participants = await UserService.get_users_by_ids([p.userId for p in convo.participants])
            participants_map = {str(p.id): p for p in participants}

            participant_publics = []
            for participant_info in convo.participants:
                participant_user = participants_map.get(participant_info.userId)
                # Ki·ªÉm tra n·∫øu participant ƒë√£ b·ªã x√≥a
                if participant_user and participant_user.status != 'deleted':
                    participant_publics.append(
                        UserPublic(
                            id=str(participant_user.id),
                            username=participant_user.username,
                            email=participant_user.email,
                            displayName=participant_user.displayName,
                            avatarUrl=participant_user.avatarUrl,
                            backgroundUrl=participant_user.backgroundUrl,
                            bio=participant_user.bio
                        )
                    )
                else:
                    # T·∫°o user public cho t√†i kho·∫£n ƒë√£ b·ªã x√≥a
                    participant_publics.append(
                        UserPublic(
                            id=participant_info.userId,
                            username="deleted",
                            email="",
                            displayName="T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i",
                            avatarUrl=None,
                            backgroundUrl=None,
                            bio=None
                        )
                    )

            last_message_preview = None

            if convo.lastMessage:
                if delete_time and convo.lastMessage.createdAt <= delete_time:
                    last_message_preview = None
                else:
                    last_message_preview = convo.lastMessage

            convo_with_participants = ConversationWithParticipants(
                id=str(convo.id),
                participantsInfo=convo.participants,
                participants=participant_publics,
                lastMessage=(
                    LastMessagePublic(**last_message_preview.model_dump())
                    if last_message_preview
                    else None
                ),
                updatedAt=convo.updatedAt,
                seenIds=convo.seenIds,
                isGroup=convo.isGroup,
                name=convo.name,
                avatarUrl=convo.avatarUrl,
            )
            result.append(convo_with_participants)

        return result
    
    @staticmethod
    async def mark_conversation_as_seen(conversation_id: str, user_id: str):
        """
        ƒê√°nh d·∫•u m·ªôt cu·ªôc tr√≤ chuy·ªán l√† ƒë√£ xem b·ªüi ng∆∞·ªùi d√πng c·ª• th·ªÉ.
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation or user_id not in [p.userId for p in conversation.participants]:
            raise PermissionError("B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p xem cu·ªôc tr√≤ chuy·ªán n√†y.")

        if user_id not in conversation.seenIds:
            conversation.seenIds.append(user_id)
            await conversation.save()

        return conversation
    
    @staticmethod
    async def recall_message(message_id: str, user_id: str):
        """
        Thu h·ªìi m·ªôt tin nh·∫Øn ƒë√£ g·ª≠i.
        """
        message = await Message.get(message_id)
        if not message:
            raise ValueError("Kh√¥ng t√¨m th·∫•y tin nh·∫Øn.")

        if message.senderId != user_id:
            raise PermissionError("B·∫°n kh√¥ng c√≥ quy·ªÅn thu h·ªìi tin nh·∫Øn n√†y.")

        # Thay ƒë·ªïi n·ªôi dung tin nh·∫Øn
        message.content['type'] = 'delete'
        await message.save()

        # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t lastMessage trong conversation
        conversation = await Conversation.get(message.conversationId)
        if conversation and conversation.lastMessage and conversation.lastMessage.createdAt == message.createdAt:
            conversation.lastMessage.content = message.content
            await conversation.save()

        # Ph√°t broadcast tin nh·∫Øn ƒë√£ thu h·ªìi
        message_data = map_message_to_public_dict(message)
        conversation_data = map_conversation_to_public_dict(conversation)

        tasks = [
            manager.broadcast_to_user(
                uid,
                {
                    "type": "recalled_message",
                    "payload": {
                        "conversation": conversation_data,
                        "message": message_data
                    }
                }
            )
            for uid in [p.userId for p in conversation.participants]
        ]
        await asyncio.gather(*tasks)

        return message
    
    @staticmethod
    async def delete_conversation(conversation_id: str, user_id: str):
        """
        X√≥a m·ªôt cu·ªôc tr√≤ chuy·ªán b·∫±ng c√°ch c·∫≠p nh·∫≠t ParticipantInfo c·ªßa ng∆∞·ªùi d√πng.
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation:
            raise ValueError("Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán.")

        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong danh s√°ch participants kh√¥ng
        participant = next((p for p in conversation.participants if p.userId == user_id), None)
        if not participant:
            raise PermissionError("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a cu·ªôc tr√≤ chuy·ªán n√†y.")

        # C·∫≠p nh·∫≠t th·ªùi gian x√≥a tin nh·∫Øn cu·ªëi c√πng
        participant.lastMessageDelete = datetime.utcnow() + timedelta(hours=7)
        await conversation.save()

        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        task = [ 
            manager.broadcast_to_user(
                user_id,
                {
                    "type": "conversation_deleted",
                    "payload": {"conversationId": conversation_id}
                }
            )
        ]
        await asyncio.gather(*task)


        return {"message": "Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng."}
    
    @staticmethod
    async def update_group_name(conversation_id: str, user_id: str, new_name: str):
        """
        C·∫≠p nh·∫≠t t√™n nh√≥m v√† t·∫°o notification message.
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation:
            raise ValueError("Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán.")
        
        if not conversation.isGroup:
            raise ValueError("ƒê√¢y kh√¥ng ph·∫£i l√† nh√≥m chat.")
        
        # L·∫•y th√¥ng tin ng∆∞·ªùi thay ƒë·ªïi
        user = await User.get(user_id)
        old_name = conversation.name
        
        # C·∫≠p nh·∫≠t t√™n
        conversation.name = new_name
        await conversation.save()
        
        # T·∫°o notification message
        await MessageService.create_notification_message(
            conversation_id=conversation_id,
            notification_type="name_changed",
            text=f"T√™n nh√≥m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh {new_name}",
            metadata={"old_name": old_name, "new_name": new_name, "changed_by": user.displayName if user else ""}
        )
        
        return {"message": "T√™n nh√≥m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng."}
    
    @staticmethod
    async def update_group_avatar(conversation_id: str, user_id: str, avatar_url: str):
        """
        C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán nh√≥m v√† t·∫°o notification message.
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation:
            raise ValueError("Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán.")
        
        if not conversation.isGroup:
            raise ValueError("ƒê√¢y kh√¥ng ph·∫£i l√† nh√≥m chat.")
        
        old_avatar = conversation.avatarUrl
        
        # C·∫≠p nh·∫≠t avatar
        conversation.avatarUrl = avatar_url
        await conversation.save()
        
        # T·∫°o notification message
        await MessageService.create_notification_message(
            conversation_id=conversation_id,
            notification_type="avatar_changed",
            text="·∫¢nh nh√≥m ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi",
            metadata={"changed_by": user_id}
        )
        
        return {"message": "·∫¢nh nh√≥m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng."}
    
    @staticmethod
    async def leave_group(conversation_id: str, user_id: str):
        """
        R·ªùi kh·ªèi nh√≥m v√† t·∫°o notification message.
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation:
            raise ValueError("Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán.")
        
        if not conversation.isGroup:
            raise ValueError("ƒê√¢y kh√¥ng ph·∫£i l√† nh√≥m chat.")
        
        # Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ trong nh√≥m kh√¥ng
        participant = next((p for p in conversation.participants if p.userId == user_id), None)
        if not participant:
            raise PermissionError("B·∫°n kh√¥ng c√≥ trong nh√≥m n√†y.")
        
        # L·∫•y th√¥ng tin ng∆∞·ªùi r·ªùi
        user = await User.get(user_id)
        
        # X√≥a ng∆∞·ªùi d√πng kh·ªèi nh√≥m
        conversation.participants = [p for p in conversation.participants if p.userId != user_id]
        await conversation.save()
        
        # T·∫°o notification message (kh√¥ng broadcast t·ª± ƒë·ªông, s·∫Ω broadcast sau)
        notification_message = await MessageService.create_notification_message(
            conversation_id=conversation_id,
            notification_type="member_left",
            text=f"{user.displayName if user else 'Ng∆∞·ªùi d√πng'} v·ª´a r·ªùi kh·ªèi nh√≥m",
            metadata={"user_id": user_id, "display_name": user.displayName if user else ""},
            broadcast=False  # T·∫Øt broadcast t·ª± ƒë·ªông, s·∫Ω broadcast th·ªß c√¥ng sau
        )
        
        # Broadcast tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ th√†nh vi√™n c√≤n l·∫°i trong nh√≥m
        async def broadcast_member_left():
            try:
                participant_ids = [p.userId for p in conversation.participants]
                
                # Format cho MessagesScreen (expect conversation data)
                conversation_data = {
                    "id": conversation_id,
                    "lastMessage": {
                        "id": str(notification_message.id),
                        "senderId": "system",
                        "content": notification_message.content,
                        "createdAt": notification_message.createdAt.isoformat(),
                    },
                    "updatedAt": notification_message.createdAt.isoformat(),
                    "seenIds": [],
                    "participantCount": len(participant_ids),
                    "participantIds": participant_ids
                }
                
                # Format cho ChatScreen (expect message data)
                message_data = {
                    "id": str(notification_message.id),
                    "conversationId": conversation_id,
                    "senderId": "system",
                    "content": notification_message.content,
                    "avatarUrl": "",
                    "createdAt": notification_message.createdAt.isoformat(),
                }
                
                # Th√™m metadata v·ªÅ s·ªë l∆∞·ª£ng th√†nh vi√™n v√† danh s√°ch th√†nh vi√™n
                metadata = {
                    "participantCount": len(participant_ids),
                    "participantIds": participant_ids
                }
                
                await asyncio.gather(*[
                    manager.broadcast_to_user(participant_id, {
                        "type": "new_message",
                        "payload": {
                            "conversation": conversation_data,
                            "message": message_data,
                            "metadata": metadata
                        }
                    }) for participant_id in participant_ids
                ])
            except Exception as e:
                print(f"Failed to broadcast member left message: {e}")
        
        # Ch·∫°y broadcast trong background
        asyncio.create_task(broadcast_member_left())
        
        # G·ª≠i push notification cho users offline kh√¥ng t·∫Øt th√¥ng b√°o
        async def send_push_notifications_leave():
            try:
                # L·∫•y danh s√°ch participants kh√¥ng t·∫Øt th√¥ng b√°o (kh√¥ng ph·∫£i user r·ªùi)
                participants_to_notify = [
                    p.userId for p in conversation.participants
                    if p.userId != user_id and not p.muteNotifications
                ]
                
                if not participants_to_notify:
                    return
                
                # T·∫†M B·ªé: G·ª≠i push notification cho t·∫•t c·∫£ users (k·ªÉ c·∫£ ƒëang online)
                # offline_user_ids = manager.get_offline_users(participants_to_notify)
                # if not offline_user_ids:
                #     return
                
                # G·ª≠i cho t·∫•t c·∫£ participants (kh√¥ng ph√¢n bi·ªát online/offline)
                offline_user_ids = participants_to_notify
                
                user_name = user.displayName if user else "Ng∆∞·ªùi d√πng"
                group_name = conversation.name or "Nh√≥m"
                
                await FCMService.send_group_notification(
                    conversation_id=conversation_id,
                    notification_type="member_left",
                    title=group_name,
                    body=f"{user_name} v·ª´a r·ªùi kh·ªèi nh√≥m",
                    offline_user_ids=offline_user_ids,
                    metadata={"user_id": user_id, "user_name": user_name}
                )
            except Exception as e:
                pass
        
        asyncio.create_task(send_push_notifications_leave())
        
        return {"message": "B·∫°n ƒë√£ r·ªùi kh·ªèi nh√≥m th√†nh c√¥ng."}
    
    @staticmethod
    async def add_member_to_group(conversation_id: str, added_by: str, member_id: str):
        """
        Th√™m th√†nh vi√™n v√†o nh√≥m v√† t·∫°o notification message.
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation:
            raise ValueError("Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán.")
        
        if not conversation.isGroup:
            raise ValueError("ƒê√¢y kh√¥ng ph·∫£i l√† nh√≥m chat.")
        
        # Ki·ªÉm tra th√†nh vi√™n ƒë√£ c√≥ trong nh√≥m ch∆∞a
        existing = next((p for p in conversation.participants if p.userId == member_id), None)
        if existing:
            raise ValueError("Th√†nh vi√™n n√†y ƒë√£ c√≥ trong nh√≥m.")
        
        # L·∫•y th√¥ng tin ng∆∞·ªùi ƒë∆∞·ª£c th√™m
        member = await User.get(member_id)
        if not member:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.")
        
        # Th√™m th√†nh vi√™n m·ªõi
        conversation.participants.append(ParticipantInfo(userId=member_id))
        await conversation.save()
        
        # L·∫•y th√¥ng tin ng∆∞·ªùi th√™m
        adder = await User.get(added_by)
        adder_name = adder.displayName if adder else "Ng∆∞·ªùi d√πng"
        
        # T·∫°o 1 notification message duy nh·∫•t cho t·∫•t c·∫£ (kh√¥ng broadcast t·ª± ƒë·ªông, s·∫Ω broadcast sau)
        notification_message = await MessageService.create_notification_message(
            conversation_id=conversation_id,
            notification_type="member_added",
            text=f"{adder_name} ƒë√£ th√™m {member.displayName} v√†o nh√≥m",
            metadata={"member_id": member_id, "member_name": member.displayName, "added_by": added_by},
            broadcast=False  # T·∫Øt broadcast t·ª± ƒë·ªông, s·∫Ω broadcast th·ªß c√¥ng sau
        )
        
        # Broadcast tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ th√†nh vi√™n trong nh√≥m
        async def broadcast_member_added():
            try:
                participant_ids = [p.userId for p in conversation.participants]
                
                # Format cho MessagesScreen (expect conversation data)
                conversation_data = {
                    "id": conversation_id,
                    "lastMessage": {
                        "id": str(notification_message.id),
                        "senderId": "system",
                        "content": notification_message.content,
                        "createdAt": notification_message.createdAt.isoformat(),
                    },
                    "updatedAt": notification_message.createdAt.isoformat(),
                    "seenIds": [],
                    "participantCount": len(participant_ids),
                    "participantIds": participant_ids
                }
                
                # Format cho ChatScreen (expect message data)
                message_data = {
                    "id": str(notification_message.id),
                    "conversationId": conversation_id,
                    "senderId": "system",
                    "content": notification_message.content,
                    "avatarUrl": "",
                    "createdAt": notification_message.createdAt.isoformat(),
                }
                
                # Th√™m metadata v·ªÅ s·ªë l∆∞·ª£ng th√†nh vi√™n v√† danh s√°ch th√†nh vi√™n
                metadata = {
                    "participantCount": len(participant_ids),
                    "participantIds": participant_ids
                }
                
                for participant_id in participant_ids:
                    await manager.broadcast_to_user(participant_id, {
                        "type": "new_message",
                        "payload": {
                            "conversation": conversation_data,
                            "message": message_data,
                            "metadata": metadata
                        }
                    })
            except Exception as e:
                print(f"Failed to broadcast member added message: {e}")
        
        # Ch·∫°y broadcast trong background
        asyncio.create_task(broadcast_member_added())
        
        # G·ª≠i push notification cho users offline kh√¥ng t·∫Øt th√¥ng b√°o
        async def send_push_notifications_add():
            try:
                # L·∫•y danh s√°ch participants kh√¥ng t·∫Øt th√¥ng b√°o (bao g·ªìm c·∫£ member ƒë∆∞·ª£c th√™m m·ªõi)
                participants_to_notify = [
                    p.userId for p in conversation.participants
                    if not p.muteNotifications
                ]
                
                if not participants_to_notify:
                    return
                
                # T·∫†M B·ªé: G·ª≠i push notification cho t·∫•t c·∫£ users (k·ªÉ c·∫£ ƒëang online)
                # offline_user_ids = manager.get_offline_users(participants_to_notify)
                # if not offline_user_ids:
                #     return
                
                # G·ª≠i cho t·∫•t c·∫£ participants (kh√¥ng ph√¢n bi·ªát online/offline)
                offline_user_ids = participants_to_notify
                
                group_name = conversation.name or "Nh√≥m"
                member_name = member.displayName if member else "Ng∆∞·ªùi d√πng"
                
                await FCMService.send_group_notification(
                    conversation_id=conversation_id,
                    notification_type="member_added",
                    title=group_name,
                    body=f"{adder_name} ƒë√£ th√™m {member_name} v√†o nh√≥m",
                    offline_user_ids=offline_user_ids,
                    metadata={
                        "member_id": member_id,
                        "member_name": member_name,
                        "added_by": added_by,
                        "adder_name": adder_name
                    }
                )
            except Exception as e:
                pass
        
        asyncio.create_task(send_push_notifications_add())
        
        return {"message": "Th√†nh vi√™n ƒë√£ ƒë∆∞·ª£c th√™m v√†o nh√≥m th√†nh c√¥ng."}
    
    @staticmethod
    async def toggle_mute_notifications(conversation_id: str, user_id: str, muted: bool):
        """
        B·∫≠t/t·∫Øt th√¥ng b√°o cho conversation c·ªßa user.
        
        Args:
            conversation_id: ID c·ªßa conversation
            user_id: ID c·ªßa user
            muted: True ƒë·ªÉ t·∫Øt th√¥ng b√°o, False ƒë·ªÉ b·∫≠t th√¥ng b√°o
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation:
            raise ValueError("Cu·ªôc tr√≤ chuy·ªán kh√¥ng t·ªìn t·∫°i.")
        
        # T√¨m participant info c·ªßa user
        participant = next(
            (p for p in conversation.participants if p.userId == user_id),
            None
        )
        
        if not participant:
            raise PermissionError("B·∫°n kh√¥ng thu·ªôc cu·ªôc tr√≤ chuy·ªán n√†y.")
        
        # C·∫≠p nh·∫≠t muteNotifications
        participant.muteNotifications = muted
        await conversation.save()
        
        return {
            "message": "ƒê√£ t·∫Øt th√¥ng b√°o" if muted else "ƒê√£ b·∫≠t th√¥ng b√°o",
            "muted": muted
        }
    
    @staticmethod
    async def update_group_avatar(conversation_id: str, user_id: str, avatar_file):
        """C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán c·ªßa nh√≥m."""
        try:
            conversation = await Conversation.get(conversation_id)
            if not conversation:
                raise ValueError("Cu·ªôc tr√≤ chuy·ªán kh√¥ng t·ªìn t·∫°i")
            
            if not conversation.isGroup:
                raise ValueError("Ch·ªâ c√≥ th·ªÉ ƒë·ªïi ·∫£nh nh√≥m")
            
            # Ki·ªÉm tra user c√≥ trong nh√≥m kh√¥ng
            participant_ids = [p.userId for p in conversation.participants]
            if user_id not in participant_ids:
                raise PermissionError("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a nh√≥m n√†y")
            
            # Upload ·∫£nh m·ªõi l√™n Cloudinary
            from ..utils.upload_to_cloudinary import upload_to_cloudinary
            result = await upload_to_cloudinary(avatar_file, folder="group_avatars")
            avatar_url = result["url"]
            
            # C·∫≠p nh·∫≠t avatar trong database
            conversation.avatarUrl = avatar_url
            await conversation.save()
            
            # T·∫°o notification message
            notification_message = await MessageService.create_notification_message(
                conversation_id=conversation_id,
                notification_type="avatar_changed",
                text="·∫¢nh nh√≥m ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi",
                metadata={"changed_by": user_id}
            )
            
            # Broadcast c·∫≠p nh·∫≠t conversation ƒë·∫øn t·∫•t c·∫£ th√†nh vi√™n
            async def broadcast_avatar_changed():
                try:
                    participant_ids = [p.userId for p in conversation.participants]
                    
                    for participant_id in participant_ids:
                        await manager.broadcast_to_user(participant_id, {
                            "type": "conversation_updated",
                            "payload": {
                                "conversation": {
                                    "id": conversation_id,
                                    "avatarUrl": avatar_url
                                }
                            }
                        })
                except Exception as e:
                    pass
            
            asyncio.create_task(broadcast_avatar_changed())
            
            return {"avatarUrl": avatar_url}
        except Exception as e:
            raise Exception(f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ·∫£nh nh√≥m: {e}")